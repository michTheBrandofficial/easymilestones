{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 11, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 22, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 22, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 28, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/.pnpm/wagmi@2.12.32_@tanstack+query-core@5.59.20_@tanstack+react-query@5.60.2_react@19.0.0-rc-02c0e_q4o2okxh4q3j3tlbp4v5u7qrrm/node_modules/wagmi/dist/esm/hooks/useAccount.js/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const useAccount = registerClientReference(\n    function() { throw new Error(\"Attempted to call useAccount() from the server but useAccount is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/.pnpm/wagmi@2.12.32_@tanstack+query-core@5.59.20_@tanstack+react-query@5.60.2_react@19.0.0-rc-02c0e_q4o2okxh4q3j3tlbp4v5u7qrrm/node_modules/wagmi/dist/esm/hooks/useAccount.js <module evaluation>\",\n    \"useAccount\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,aAAa,CAAA,GAAA,ucAAA,CAAA,0BAAuB,AAAD,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAoO,GACjQ,6NACA","ignoreList":[0]}},
    {"offset": {"line": 36, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 42, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/.pnpm/wagmi@2.12.32_@tanstack+query-core@5.59.20_@tanstack+react-query@5.60.2_react@19.0.0-rc-02c0e_q4o2okxh4q3j3tlbp4v5u7qrrm/node_modules/wagmi/dist/esm/hooks/useAccount.js/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const useAccount = registerClientReference(\n    function() { throw new Error(\"Attempted to call useAccount() from the server but useAccount is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/.pnpm/wagmi@2.12.32_@tanstack+query-core@5.59.20_@tanstack+react-query@5.60.2_react@19.0.0-rc-02c0e_q4o2okxh4q3j3tlbp4v5u7qrrm/node_modules/wagmi/dist/esm/hooks/useAccount.js\",\n    \"useAccount\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,aAAa,CAAA,GAAA,ucAAA,CAAA,0BAAuB,AAAD,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAoO,GACjQ,yMACA","ignoreList":[0]}},
    {"offset": {"line": 50, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 56, "column": 0}, "map": {"version":3,"file":"useAccount.js","sources":["turbopack://[project]/node_modules/.pnpm/wagmi@2.12.32_@tanstack+query-core@5.59.20_@tanstack+react-query@5.60.2_react@19.0.0-rc-02c0e_q4o2okxh4q3j3tlbp4v5u7qrrm/node_modules/wagmi/src/hooks/useAccount.ts"],"sourcesContent":["'use client'\n\nimport {\n  type Config,\n  type GetAccountReturnType,\n  type ResolvedRegister,\n  getAccount,\n  watchAccount,\n} from '@wagmi/core'\n\nimport type { ConfigParameter } from '../types/properties.js'\nimport { useConfig } from './useConfig.js'\nimport { useSyncExternalStoreWithTracked } from './useSyncExternalStoreWithTracked.js'\n\nexport type UseAccountParameters<config extends Config = Config> =\n  ConfigParameter<config>\n\nexport type UseAccountReturnType<config extends Config = Config> =\n  GetAccountReturnType<config>\n\n/** https://wagmi.sh/react/api/hooks/useAccount */\nexport function useAccount<config extends Config = ResolvedRegister['config']>(\n  parameters: UseAccountParameters<config> = {},\n): UseAccountReturnType<config> {\n  const config = useConfig(parameters)\n\n  return useSyncExternalStoreWithTracked(\n    (onChange) => watchAccount(config, { onChange }),\n    () => getAccount(config),\n  )\n}\n"],"names":[],"mappings":"","ignoreList":[0]}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/.pnpm/wagmi@2.12.32_@tanstack+query-core@5.59.20_@tanstack+react-query@5.60.2_react@19.0.0-rc-02c0e_q4o2okxh4q3j3tlbp4v5u7qrrm/node_modules/wagmi/dist/esm/hooks/useEnsName.js/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const useEnsName = registerClientReference(\n    function() { throw new Error(\"Attempted to call useEnsName() from the server but useEnsName is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/.pnpm/wagmi@2.12.32_@tanstack+query-core@5.59.20_@tanstack+react-query@5.60.2_react@19.0.0-rc-02c0e_q4o2okxh4q3j3tlbp4v5u7qrrm/node_modules/wagmi/dist/esm/hooks/useEnsName.js <module evaluation>\",\n    \"useEnsName\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,aAAa,CAAA,GAAA,ucAAA,CAAA,0BAAuB,AAAD,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAoO,GACjQ,6NACA","ignoreList":[0]}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 80, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/.pnpm/wagmi@2.12.32_@tanstack+query-core@5.59.20_@tanstack+react-query@5.60.2_react@19.0.0-rc-02c0e_q4o2okxh4q3j3tlbp4v5u7qrrm/node_modules/wagmi/dist/esm/hooks/useEnsName.js/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const useEnsName = registerClientReference(\n    function() { throw new Error(\"Attempted to call useEnsName() from the server but useEnsName is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/.pnpm/wagmi@2.12.32_@tanstack+query-core@5.59.20_@tanstack+react-query@5.60.2_react@19.0.0-rc-02c0e_q4o2okxh4q3j3tlbp4v5u7qrrm/node_modules/wagmi/dist/esm/hooks/useEnsName.js\",\n    \"useEnsName\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,aAAa,CAAA,GAAA,ucAAA,CAAA,0BAAuB,AAAD,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAoO,GACjQ,yMACA","ignoreList":[0]}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 94, "column": 0}, "map": {"version":3,"file":"useEnsName.js","sources":["turbopack://[project]/node_modules/.pnpm/wagmi@2.12.32_@tanstack+query-core@5.59.20_@tanstack+react-query@5.60.2_react@19.0.0-rc-02c0e_q4o2okxh4q3j3tlbp4v5u7qrrm/node_modules/wagmi/src/hooks/useEnsName.ts"],"sourcesContent":["'use client'\n\nimport type { Config, GetEnsNameErrorType, ResolvedRegister } from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type GetEnsNameData,\n  type GetEnsNameOptions,\n  type GetEnsNameQueryFnData,\n  type GetEnsNameQueryKey,\n  getEnsNameQueryOptions,\n} from '@wagmi/core/query'\n\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseEnsNameParameters<\n  config extends Config = Config,\n  selectData = GetEnsNameData,\n> = Compute<\n  GetEnsNameOptions<config> &\n    ConfigParameter<config> &\n    QueryParameter<\n      GetEnsNameQueryFnData,\n      GetEnsNameErrorType,\n      selectData,\n      GetEnsNameQueryKey<config>\n    >\n>\n\nexport type UseEnsNameReturnType<selectData = GetEnsNameData> =\n  UseQueryReturnType<selectData, GetEnsNameErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useEnsName */\nexport function useEnsName<\n  config extends Config = ResolvedRegister['config'],\n  selectData = GetEnsNameData,\n>(\n  parameters: UseEnsNameParameters<config, selectData> = {},\n): UseEnsNameReturnType<selectData> {\n  const { address, query = {} } = parameters\n\n  const config = useConfig(parameters)\n  const chainId = useChainId({ config })\n\n  const options = getEnsNameQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId,\n  })\n  const enabled = Boolean(address && (query.enabled ?? true))\n\n  return useQuery({ ...query, ...options, enabled })\n}\n"],"names":[],"mappings":"","ignoreList":[0]}},
    {"offset": {"line": 98, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/.pnpm/next@15.0.2_@babel+core@7.26.0_react-dom@19.0.0-rc-02c0e824-20241028_react@19.0.0-rc-02c0e824_xelwhe2z5lglznkjbudtglu7em/node_modules/next/dist/src/build/templates/app-page.ts"],"sourcesContent":["import type { LoaderTree } from '../../server/lib/app-dir-module'\nimport { AppPageRouteModule } from '../../server/route-modules/app-page/module.compiled' with { 'turbopack-transition': 'next-ssr' }\nimport { RouteKind } from '../../server/route-kind'\n\n// These are injected by the loader afterwards.\n\n/**\n * The tree created in next-app-loader that holds component segments and modules\n * and I've updated it.\n */\ndeclare const tree: LoaderTree\ndeclare const pages: any\n\n// We inject the tree and pages here so that we can use them in the route\n// module.\n// INJECT:tree\n// INJECT:pages\n\nexport { tree, pages }\n\nexport { default as GlobalError } from 'VAR_MODULE_GLOBAL_ERROR'\n\n// These are injected by the loader afterwards.\ndeclare const __next_app_require__: any\ndeclare const __next_app_load_chunk__: any\n\n// INJECT:__next_app_require__\n// INJECT:__next_app_load_chunk__\n\nexport const __next_app__ = {\n  require: __next_app_require__,\n  loadChunk: __next_app_load_chunk__,\n}\n\nexport * from '../../server/app-render/entry-base'\n\n// Create and export the route module that will be consumed.\nexport const routeModule = new AppPageRouteModule({\n  definition: {\n    kind: RouteKind.APP_PAGE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    // The following aren't used in production.\n    bundlePath: '',\n    filename: '',\n    appPaths: [],\n  },\n  userland: {\n    loaderTree: tree,\n  },\n})\n"],"names":["AppPageRouteModule","RouteKind","tree","pages","default","GlobalError","__next_app__","require","__next_app_require__","loadChunk","__next_app_load_chunk__","routeModule","definition","kind","APP_PAGE","page","pathname","bundlePath","filename","appPaths","userland","loaderTree"],"mappings":";;;;;;AAeA,cAAc;AAdd,SAASA,kBAAkB,QAAQ,2DAA2D;IAAE,wBAAwB;AAAW,EAAC;AAYpI,yEAAyE;AAKzE,SAASE,IAAI,EAAEC,KAAK,GAAE;AAStB,iCAAiC;;;;;;;;AAEjC,OAAO,MAAMG,eAAe,6CAAA;IAC1BC,MAAAA,GAASC;IACTC,EAAAA,OAAAA;IAAAA,CAAWC;IAAAA;QACb,EAAC,UAAA;YAAA;YAAA,CAED;YAAA,WAAc,qCAAoC;gBAElD,UAAA,CAAA;gBAAA,QAAA;oBAAA,IAAA,0BAA4D;oBAAA;iBAAA;YAC5D;SAAA,KAAO,MAAMC,cAAc,IAAIX,mBAAmB;;KAChDY,YAAY;cACVC,IAAAA,EAAMZ;YAAAA,MAAAA,CAAUa,QAAQ;iBACxBC,MAAM,QAAA;wBAAA;4BACNC,KAAAA,CAAAA,GAAAA,6XAAAA,CAAAA,KAAU,iBAAA,EAAA,MAAA,MAAA,MAAA,EAAA,iBAAA,CAAA,CAAA,EAAA,mSAAA,CAAA,UAAA,CAAA,GAAA,CAAA,KAAA,CAAA,KAAA,MAAA,CAAA,CAAA,EAAA,CAAA,EAAA,EAAA;4BACV,OAAA,GAAA,mSAAA,CAAA,UAAA,CAAA,KAAA,CAA2C,CAAA,EAAA,mSAAA,CAAA,UAAA,CAAA,MAAA,EAAA;4BAC3CC,MAAAA,CAAAA,KAAY,OAAA,CAAA;;qBACZC,UAAU;gBACVC,UAAU,EAAE;UACd;QAAA,UAAA;YAAA,IAAA;YAAA;SAAA;UACAC,UAAU,CAAA;YAAA,IAAA;YAAA;SAAA;;OACRC,YAAYnB;IACd,EAAA,QAAA;IAAA;CAAA","ignoreList":[0]}},
    {"offset": {"line": 189, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}