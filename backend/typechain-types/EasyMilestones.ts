/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace EasyMilestones {
  export type MilestoneWithoutStatusStruct = {
    amount: BigNumberish;
    deadline: BigNumberish;
  };

  export type MilestoneWithoutStatusStructOutput = [
    amount: bigint,
    deadline: bigint
  ] & { amount: bigint; deadline: bigint };

  export type MilestoneStruct = {
    amount: BigNumberish;
    deadline: BigNumberish;
    status: BigNumberish;
  };

  export type MilestoneStructOutput = [
    amount: bigint,
    deadline: bigint,
    status: bigint
  ] & { amount: bigint; deadline: bigint; status: bigint };

  export type TransactionStruct = {
    amount: BigNumberish;
    deadline: BigNumberish;
    milestones: EasyMilestones.MilestoneStruct[];
  };

  export type TransactionStructOutput = [
    amount: bigint,
    deadline: bigint,
    milestones: EasyMilestones.MilestoneStructOutput[]
  ] & {
    amount: bigint;
    deadline: bigint;
    milestones: EasyMilestones.MilestoneStructOutput[];
  };
}

export interface EasyMilestonesInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "create_transaction"
      | "get_transaction"
      | "process_due_milestones"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "FundsTransferred" | "TransactionCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "create_transaction",
    values: [BigNumberish, EasyMilestones.MilestoneWithoutStatusStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "get_transaction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "process_due_milestones",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "create_transaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_transaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "process_due_milestones",
    data: BytesLike
  ): Result;
}

export namespace FundsTransferredEvent {
  export type InputTuple = [
    recipient: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    recipient: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionCreatedEvent {
  export type InputTuple = [amount: BigNumberish, deadline: BigNumberish];
  export type OutputTuple = [amount: bigint, deadline: bigint];
  export interface OutputObject {
    amount: bigint;
    deadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EasyMilestones extends BaseContract {
  connect(runner?: ContractRunner | null): EasyMilestones;
  waitForDeployment(): Promise<this>;

  interface: EasyMilestonesInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  create_transaction: TypedContractMethod<
    [
      _deadline: BigNumberish,
      _milestones: EasyMilestones.MilestoneWithoutStatusStruct[]
    ],
    [void],
    "payable"
  >;

  get_transaction: TypedContractMethod<
    [],
    [EasyMilestones.TransactionStructOutput],
    "view"
  >;

  process_due_milestones: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "create_transaction"
  ): TypedContractMethod<
    [
      _deadline: BigNumberish,
      _milestones: EasyMilestones.MilestoneWithoutStatusStruct[]
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "get_transaction"
  ): TypedContractMethod<[], [EasyMilestones.TransactionStructOutput], "view">;
  getFunction(
    nameOrSignature: "process_due_milestones"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "FundsTransferred"
  ): TypedContractEvent<
    FundsTransferredEvent.InputTuple,
    FundsTransferredEvent.OutputTuple,
    FundsTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TransactionCreated"
  ): TypedContractEvent<
    TransactionCreatedEvent.InputTuple,
    TransactionCreatedEvent.OutputTuple,
    TransactionCreatedEvent.OutputObject
  >;

  filters: {
    "FundsTransferred(address,uint256,uint256)": TypedContractEvent<
      FundsTransferredEvent.InputTuple,
      FundsTransferredEvent.OutputTuple,
      FundsTransferredEvent.OutputObject
    >;
    FundsTransferred: TypedContractEvent<
      FundsTransferredEvent.InputTuple,
      FundsTransferredEvent.OutputTuple,
      FundsTransferredEvent.OutputObject
    >;

    "TransactionCreated(uint256,uint256)": TypedContractEvent<
      TransactionCreatedEvent.InputTuple,
      TransactionCreatedEvent.OutputTuple,
      TransactionCreatedEvent.OutputObject
    >;
    TransactionCreated: TypedContractEvent<
      TransactionCreatedEvent.InputTuple,
      TransactionCreatedEvent.OutputTuple,
      TransactionCreatedEvent.OutputObject
    >;
  };
}
