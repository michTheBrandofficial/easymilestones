/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace EasyMilestones {
  export type MilestoneStruct = {
    amount: BigNumberish;
    deadline: BigNumberish;
    status: BigNumberish;
  };

  export type MilestoneStructOutput = [
    amount: bigint,
    deadline: bigint,
    status: bigint
  ] & { amount: bigint; deadline: bigint; status: bigint };

  export type TransactionStruct = {
    amount: BigNumberish;
    deadline: BigNumberish;
    milestones: EasyMilestones.MilestoneStruct[];
  };

  export type TransactionStructOutput = [
    amount: bigint,
    deadline: bigint,
    milestones: EasyMilestones.MilestoneStructOutput[]
  ] & {
    amount: bigint;
    deadline: bigint;
    milestones: EasyMilestones.MilestoneStructOutput[];
  };
}

export interface EasyMilestonesInterface extends Interface {
  getFunction(
    nameOrSignature: "create_transaction" | "get_transaction"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "create_transaction",
    values: [BigNumberish, EasyMilestones.MilestoneStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "get_transaction",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "create_transaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_transaction",
    data: BytesLike
  ): Result;
}

export interface EasyMilestones extends BaseContract {
  connect(runner?: ContractRunner | null): EasyMilestones;
  waitForDeployment(): Promise<this>;

  interface: EasyMilestonesInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  create_transaction: TypedContractMethod<
    [_deadline: BigNumberish, _milestones: EasyMilestones.MilestoneStruct[]],
    [void],
    "payable"
  >;

  get_transaction: TypedContractMethod<
    [],
    [EasyMilestones.TransactionStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "create_transaction"
  ): TypedContractMethod<
    [_deadline: BigNumberish, _milestones: EasyMilestones.MilestoneStruct[]],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "get_transaction"
  ): TypedContractMethod<[], [EasyMilestones.TransactionStructOutput], "view">;

  filters: {};
}
